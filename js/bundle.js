(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
const request = require('./services/request');

const basketCloseBtn = document.querySelector('.window-close_button');
const basketHtml = document.querySelector('#window-basket');
const basketIconHtml = document.querySelector('.basket-icons');
const purchaseTotalCostHtml = document.getElementById('purchase-total-cost');
const productsQuantityIndicatorHtml = document.querySelector('.basket-quantity_number');
const tableHtml = document.getElementById('products-table');
const formHtml = document.querySelector('.form');
const inputEmail = document.querySelector('#email');
const inputPhone = document.querySelector('#phone');
const errorHtml = document.querySelector('.error');
const modalWindow = document.querySelector('#window-thank');
const tableContainer = document.querySelector('#basket-table-container');
const PRODUCTS_IN_BASKET = {};
let PURCHASE_COST = 0;
const tablesColumnsDescriptor = [{
  displayName: '',
  name: 'avatar'
}, {
  displayName: 'Товар',
  name: 'title'
}, {
  displayName: 'Цена ( грн )',
  name: 'price'
}, {
  displayName: 'Количество ( кг )',
  name: 'quantity'
}, {
  displayName: 'Стоимость ( грн )',
  name: 'cost'
}, {
  displayName: '',
  name: 'removeButton'
}];

function emptyBasketAfterOrdering() {
  const rowToRemove = document.querySelectorAll('[data-product-row]');

  for (let i = 0; i < rowToRemove.length; i++) {
    const row = rowToRemove[i];
    row.parentNode.removeChild(row);
  }

  for (let keys in PRODUCTS_IN_BASKET) {
    delete PRODUCTS_IN_BASKET[keys];
  }

  PURCHASE_COST = 0;
  purchaseTotalCostHtml.innerText = PURCHASE_COST;
  hideBasketContent();
  updateProductsQuantityIndicator();
} // emptyBasketAfterOrdering ()


function calculateTotalCost() {
  let cost = 0;
  const keys = Object.keys(PRODUCTS_IN_BASKET);

  for (i = 0; i < keys.length; i++) {
    cost += parseFloat(PRODUCTS_IN_BASKET[keys[i]].cost);
  }

  PURCHASE_COST = cost;
  purchaseTotalCostHtml.innerText = cost;
}

function updateProductsQuantityIndicator() {
  const keys = Object.keys(PRODUCTS_IN_BASKET);
  productsQuantityIndicatorHtml.innerHTML = keys.length;
}

function calculateProductCost(product) {
  const costHtmlElement = document.querySelector(`[data-cost-for=${product.id}]`);
  const cost = Number(product.price) * Number(PRODUCTS_IN_BASKET[product.id].quantity);
  console.log('====', product);
  costHtmlElement.innerText = cost;
}

function increaseProductQuantity(product) {
  const quantityHtmlElement = document.querySelector(`[data-quantity-for=${product.id}]`);
  quantityHtmlElement.innerText = PRODUCTS_IN_BASKET[product.id].quantity;
  calculateProductCost(product);
}

function renderQuantityControl(parentNode, product) {
  const container = document.createElement('div');
  const value = document.createElement('span');
  const increaseQuantityBtn = document.createElement('button');
  const decreaseQuantityBtn = document.createElement('button');
  value.setAttribute('data-quantity-for', product.id);
  value.innerText = product.quantity;
  increaseQuantityBtn.innerText = "+";
  decreaseQuantityBtn.innerText = "-";
  increaseQuantityBtn.classList.add('product-quantity-btn');
  decreaseQuantityBtn.classList.add('product-quantity-btn');
  container.classList.add('quantity-control-container');
  increaseQuantityBtn.addEventListener('click', function () {
    const quantity = Number(value.innerText) + Number(product.step);
    value.innerText = quantity;
    PRODUCTS_IN_BASKET[product.id].quantity = quantity;
    PRODUCTS_IN_BASKET[product.id].cost = quantity * product.price;
    calculateProductCost(product);
    calculateTotalCost();
  });
  decreaseQuantityBtn.addEventListener('click', function () {
    const quantity = Number(value.innerText) > product.step ? Number(value.innerText) - Number(product.step) : value.innerText;
    value.innerText = quantity;
    PRODUCTS_IN_BASKET[product.id].quantity = quantity;
    PRODUCTS_IN_BASKET[product.id].cost = quantity * product.price;
    calculateProductCost(product);
    calculateTotalCost();
  });
  container.appendChild(decreaseQuantityBtn);
  container.appendChild(value);
  container.appendChild(increaseQuantityBtn);
  parentNode.appendChild(container);
}

function renderTableHeader() {
  const tr = document.createElement('tr');
  tablesColumnsDescriptor.forEach(descriptor => {
    const th = document.createElement('th');

    if (descriptor.name === 'avatar') {
      th.classList.add('img-cell');
    }

    th.innerText = descriptor.displayName;
    tr.appendChild(th);
  });
  tableHtml.appendChild(tr);
}

function renderRemoveProductBtn(parentNode, product) {
  const closeIconBtn = document.createElement('button');
  const icon = document.createElement('span');
  closeIconBtn.classList.add('window-close_button');
  icon.classList.add('button-span');
  closeIconBtn.addEventListener('click', function () {
    delete PRODUCTS_IN_BASKET[product.id];
    const rowToRemove = document.querySelector(`[data-product-row=${product.id}]`);
    rowToRemove.parentNode.removeChild(rowToRemove);

    if (!Object.keys(PRODUCTS_IN_BASKET).length) {
      hideBasketContent();
    }

    updateProductsQuantityIndicator();
    calculateTotalCost();
  });
  closeIconBtn.appendChild(icon);
  parentNode.appendChild(closeIconBtn);
}

function addProductToTable(product) {
  const tr = document.createElement('tr');
  tr.setAttribute('data-product-row', product.id);
  tablesColumnsDescriptor.forEach(descriptor => {
    const td = document.createElement('td');

    switch (descriptor.name) {
      case 'title':
        td.innerText = product.title;
        break;

      case 'price':
        td.innerText = product.price;
        break;

      case 'quantity':
        renderQuantityControl(td, product);
        break;

      case 'cost':
        td.setAttribute('data-cost-for', product.id);
        td.innerText = PRODUCTS_IN_BASKET[product.id] ? PRODUCTS_IN_BASKET[product.id].quantity * product.price : product.quantity * product.price;
        break;

      case 'avatar':
        td.innerHTML = `<img alt=${product.title} src=${product.avatar} />`;
        td.classList.add('img-cell'); // td.style = "width: 100px;"

        break;

      default:
        renderRemoveProductBtn(td, product);
        break;
    }

    tr.appendChild(td);
  });
  tableHtml.appendChild(tr);
}

function showBasketContent() {
  const itemsToShow = document.querySelectorAll('.hidden-without-products');
  const itemsToHide = document.querySelectorAll('.hidden-with-products');
  itemsToShow.forEach(function (item) {
    item.classList.remove('hidden');
  });
  itemsToHide.forEach(function (item) {
    item.classList.add('hidden');
  });
}

function hideBasketContent() {
  const itemsToShow = document.querySelectorAll('.hidden-with-products');
  const itemsToHide = document.querySelectorAll('.hidden-without-products');
  itemsToShow.forEach(function (item) {
    item.classList.remove('hidden');
  });
  itemsToHide.forEach(function (item) {
    item.classList.add('hidden');
  });
}

function productToBasket(product) {
  const productId = product.id;

  if (!Object.keys(PRODUCTS_IN_BASKET).length) {
    showBasketContent();
  }

  if (PRODUCTS_IN_BASKET[productId]) {
    const quantity = +PRODUCTS_IN_BASKET[productId].quantity + +product.quantity;
    PRODUCTS_IN_BASKET[productId] = Object.assign({}, product, {
      cost: product.price * quantity,
      step: product.step,
      quantity
    });
    increaseProductQuantity(product, product.quantity);
  } else {
    PRODUCTS_IN_BASKET[productId] = Object.assign({}, product, {
      quantity: +product.quantity,
      step: product.step,
      cost: product.price * product.quantity
    });
    addProductToTable(product);
  }

  calculateTotalCost();
  updateProductsQuantityIndicator();
}

basketCloseBtn.addEventListener('click', function () {
  basketHtml.classList.toggle('hidden'); // basketHtml.classList.remove ('modal-window');
});
basketIconHtml.addEventListener('click', function () {
  basketHtml.classList.toggle('hidden');
});
renderTableHeader();

function validateForm() {
  if (inputEmail.value === "" || inputPhone.value === "") {
    errorHtml.classList.remove('hidden');
    inputEmail.value === "" && inputEmail.setAttribute("style", "border: 1px solid red;");
    inputPhone.value === "" && inputPhone.setAttribute("style", "border: 1px solid red;");
    return false;
  }

  return true;
}

function tryToHideErrorMessage() {
  if (!inputEmail.hasAttribute('style') && !inputPhone.hasAttribute('style')) {
    errorHtml.classList.add('hidden');
  }
}

function delTextError(inputFieldHtml) {
  return function () {
    if (inputFieldHtml.hasAttribute('style')) {
      inputFieldHtml.removeAttribute('style');
    }

    tryToHideErrorMessage();
  };
}

formHtml.addEventListener('submit', function (e) {
  e.preventDefault();
  const elements = e.target.elements;
  const isFormDataValid = validateForm();
  const user = {};

  for (let i = 0; i < elements.length; i++) {
    if (elements[i].value) {
      user[elements[i].name] = elements[i].value;
    }
  }

  if (isFormDataValid) {
    request.post('/api/products', {
      user,
      products: PRODUCTS_IN_BASKET,
      totalCost: PURCHASE_COST
    }).then(data => {
      if (data.ok) {
        // TODO Show here your window with thanks for making shopping
        modalWindow.classList.toggle('hidden');
        basketHtml.classList.toggle('hidden');
        emptyBasketAfterOrdering();
      }
    }).catch(err => {
      console.error(err); // TODO Handle case when something went wrong on server
    });
  }
});
inputEmail.addEventListener('focus', delTextError(inputEmail));
inputPhone.addEventListener('focus', delTextError(inputPhone));
module.exports = {
  productToBasket
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/basket.js","/")
},{"./services/request":8,"buffer":38,"pBGvAp":40}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
const basket = require('./basket.js'); // { productToBasket }


const pictures = require('./productPictures.js');

const productsCard = document.querySelectorAll(`[data-card]`);
const productsMock = [{
  id: 'fish-1',
  avatar: 'img/title_img/5.png',
  img: ['img/title_img/5.png', 'img/koryushka/fish1.jpg', 'img/koryushka/fish2.jpg', 'img/koryushka/fish3.png'],
  title: 'Корюшка дальневосточная с икрой',
  description: 'Минимальный заказ 1 кг. Размер рыбы 26-33 см.',
  price: 680,
  quantity: 1,
  step: 1,
  category: 'fish'
}, {
  id: 'fish-2',
  avatar: 'img/title_img/5.png',
  img: ['img/title_img/5.png', 'img/koryushka/fish1.jpg', 'img/koryushka/fish2.jpg', 'img/koryushka/fish3.png'],
  title: 'Камбала дальневосточная с икрой',
  description: 'Минимальный заказ 1 кг. Вес одной камбалы от 300 грамм.',
  price: 590,
  quantity: 1,
  step: 1,
  category: 'fish'
}, // { id: 'fish-3', avatar: 'img/title_img/5.png', title: 'ОКУНЬ', description: 'Окунь предпочитает водоемы с чистой водой. Это могут быть реки, пруды, озера, водохранилища и т.д. Окунь является самым часто встречающимся хищником, но его никогда не найдешь там, где вода мутная и грязная.', price: 630, quantity: 1, step: 1, category: 'fish' },
// { id: 'fish-4', avatar: 'img/title_img/5.png', title: 'ГУСТЕРА', description: 'Это малоподвижный вид рыбы с голубовато-серым окрасом. Живет густера примерно 15 лет и врастает в длину до 35 см, при весе 1,2 кг. Густера, как и лещ, растет довольно медленно.', price: 12000, quantity: 1, step: 1, category: 'fish' },
// { id: 'fish-5', avatar: 'img/title_img/5.png', title: 'САЗАН', description: 'Эта рыба отличается темно-желто-золотистым оттенком', price: 10, quantity: 1, step: 1, category: 'fish' },
{
  id: 'caviar-1',
  avatar: 'img/title_img/5.png',
  img: ['img/title_img/5.png', 'img/koryushka/fish1.jpg', 'img/koryushka/fish2.jpg', 'img/koryushka/fish3.png'],
  title: 'Икра лемонемы',
  description: 'Икра в вакуумной упаковке. Фасовка по 0,5 кг. Минимальный заказ 0,5 кг. Срок хранения 6 мес.',
  price: 700,
  quantity: 0.5,
  step: 0.5,
  category: 'caviar'
}, {
  id: 'caviar-2',
  avatar: 'img/title_img/5.png',
  img: ['img/title_img/5.png', 'img/koryushka/fish1.jpg', 'img/koryushka/fish2.jpg', 'img/koryushka/fish3.png'],
  title: 'Икра наваги',
  description: 'Икра в вакуумной упаковке. Фасовка по 0,5 кг. Минимальный заказ 0,5 кг. Срок хранения 6 мес.',
  price: 680,
  quantity: 0.5,
  step: 0.5,
  category: 'caviar'
}, {
  id: 'snacks-1',
  avatar: 'img/title_img/5.png',
  img: ['img/title_img/5.png', 'img/koryushka/fish1.jpg', 'img/koryushka/fish2.jpg', 'img/koryushka/fish3.png'],
  title: 'Палочки горбуши',
  description: 'Суперовые палочки горбуши фасовка по 0,5кг',
  price: 560,
  quantity: 0.5,
  step: 0.5,
  category: 'snacks'
} // { id: 'caviar-3', avatar: 'img/title_img/5.png', title: 'Икра лосося', description: 'Очень вкусная икра в ястыке', price: 750, quantity: 0.5, step: 0.5, category: 'caviar'},
// { id: 'caviar-4', avatar: 'img/title_img/5.png', title: 'Икра лосося', description: 'Очень вкусная икра в ястыке', price: 750, quantity: 0.5, step: 0.5, category: 'caviar'},
// { id: 'snacks-2', avatar: 'img/title_img/5.png', title: 'Рыбные палочки', description: 'Суперовые палочки горбуши фасовка по 0,5кг', price: 490, quantity: 0.5, step: 0.5, category: 'snacks'},
];

for (var i = 0; i < productsCard.length; i++) {
  const productHtml = productsCard[i];
  const productId = productHtml.getAttribute('data-card');
  const productObj = productsMock.find(function (product) {
    if (productId === product.id) {
      return true;
    }
  });
  const quantityMinus = productHtml.querySelector(".reduce");
  const quantityPlus = productHtml.querySelector(".increase");
  const quantityInput = productHtml.querySelector('.quantity');
  const buttonBasket = productHtml.querySelector('.button-basket');
  const avatar = productHtml.querySelector('.title-img');
  console.log(avatar);
  quantityInput.value = productObj.quantity;
  quantityInput.step = productObj.step;
  quantityMinus.addEventListener("click", function () {
    const nowValue = quantityInput.value;
    const newValue = parseFloat(nowValue) - productObj.step;

    if (newValue >= productObj.step) {
      quantityInput.value = newValue;
      productObj.quantity = newValue;
    }
  });
  quantityPlus.addEventListener("click", function () {
    const nowValue = quantityInput.value;
    const newValue = parseFloat(nowValue) + productObj.step;
    quantityInput.value = newValue;
    productObj.quantity = newValue;
  });
  quantityInput.addEventListener('change', function () {
    productObj.quantity = this.value;
  });
  buttonBasket.addEventListener('click', function (event) {
    basket.productToBasket(productObj);
  });
  avatar.addEventListener('click', function () {
    const productImg = productObj.img;
    pictures.createGalleryProductImages(productImg);
    console.log(productImg); // console.log (productPicturesButton);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/cardProduct.js","/")
},{"./basket.js":1,"./productPictures.js":6,"buffer":38,"pBGvAp":40}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
const hamburger = require('./hamburger');

const products = require('./products');

const visualEffects = require('./visual-effects');

const basket = require('./basket');

require('./products');

require('./thankPage');

require('./cardProduct');

require('./productPictures');

window.onload = function () {
  hamburger.onLoad && hamburger.onLoad();
  products.onLoad && products.onLoad();
  visualEffects.onLoad && visualEffects.onLoad();
  basket.onLoad && basket.onLoad();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfZjUxMTM3YWIuanMiXSwibmFtZXMiOlsiaGFtYnVyZ2VyIiwicmVxdWlyZSIsInByb2R1Y3RzIiwidmlzdWFsRWZmZWN0cyIsImJhc2tldCIsIndpbmRvdyIsIm9ubG9hZCIsIm9uTG9hZCJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUF6Qjs7QUFDQSxNQUFNQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxZQUFELENBQXhCOztBQUNBLE1BQU1FLGFBQWEsR0FBR0YsT0FBTyxDQUFDLGtCQUFELENBQTdCOztBQUNBLE1BQU1HLE1BQU0sR0FBR0gsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBQ0FBLE9BQU8sQ0FBQyxZQUFELENBQVA7O0FBQ0FBLE9BQU8sQ0FBQyxhQUFELENBQVA7O0FBQ0FBLE9BQU8sQ0FBQyxlQUFELENBQVA7O0FBQ0FBLE9BQU8sQ0FBQyxtQkFBRCxDQUFQOztBQUVBSSxNQUFNLENBQUNDLE1BQVAsR0FBZ0IsWUFBVztBQUN6Qk4sRUFBQUEsU0FBUyxDQUFDTyxNQUFWLElBQW9CUCxTQUFTLENBQUNPLE1BQVYsRUFBcEI7QUFDQUwsRUFBQUEsUUFBUSxDQUFDSyxNQUFULElBQW1CTCxRQUFRLENBQUNLLE1BQVQsRUFBbkI7QUFDQUosRUFBQUEsYUFBYSxDQUFDSSxNQUFkLElBQXdCSixhQUFhLENBQUNJLE1BQWQsRUFBeEI7QUFDQUgsRUFBQUEsTUFBTSxDQUFDRyxNQUFQLElBQWlCSCxNQUFNLENBQUNHLE1BQVAsRUFBakI7QUFDRCxDQUxEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaGFtYnVyZ2VyID0gcmVxdWlyZSgnLi9oYW1idXJnZXInKVxuY29uc3QgcHJvZHVjdHMgPSByZXF1aXJlKCcuL3Byb2R1Y3RzJylcbmNvbnN0IHZpc3VhbEVmZmVjdHMgPSByZXF1aXJlKCcuL3Zpc3VhbC1lZmZlY3RzJylcbmNvbnN0IGJhc2tldCA9IHJlcXVpcmUoJy4vYmFza2V0JylcbnJlcXVpcmUoJy4vcHJvZHVjdHMnKVxucmVxdWlyZSgnLi90aGFua1BhZ2UnKVxucmVxdWlyZSgnLi9jYXJkUHJvZHVjdCcpXG5yZXF1aXJlKCcuL3Byb2R1Y3RQaWN0dXJlcycpXG5cbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgaGFtYnVyZ2VyLm9uTG9hZCAmJiBoYW1idXJnZXIub25Mb2FkKCk7XG4gIHByb2R1Y3RzLm9uTG9hZCAmJiBwcm9kdWN0cy5vbkxvYWQoKTtcbiAgdmlzdWFsRWZmZWN0cy5vbkxvYWQgJiYgdmlzdWFsRWZmZWN0cy5vbkxvYWQoKTtcbiAgYmFza2V0Lm9uTG9hZCAmJiBiYXNrZXQub25Mb2FkKCk7XG59Il19
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_f51137ab.js","/")
},{"./basket":1,"./cardProduct":2,"./hamburger":4,"./productPictures":6,"./products":7,"./thankPage":9,"./visual-effects":10,"buffer":38,"pBGvAp":40}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
const toggleMenu = function ({
  hamburgerBtn,
  menu
}) {
  return function () {
    hamburgerBtn.classList.toggle('hamburger-menu_active');
    menu.classList.toggle('menu_active');
  };
};

module.exports = {
  onLoad: () => {
    const menu = document.querySelector('.hamburger-menu_nav'); // const menuLink = document.querySelectorAll ('.hamburger-menu_link');

    const hamburgerBtn = document.querySelector('.hamburger-menu_button');
    hamburgerBtn.addEventListener('click', toggleMenu({
      hamburgerBtn,
      menu
    }));
    menu.addEventListener('click', toggleMenu({
      hamburgerBtn,
      menu
    }));
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhbWJ1cmdlci5qcyJdLCJuYW1lcyI6WyJ0b2dnbGVNZW51IiwiaGFtYnVyZ2VyQnRuIiwibWVudSIsImNsYXNzTGlzdCIsInRvZ2dsZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJvbkxvYWQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVLEdBQUcsVUFBUztBQUFFQyxFQUFBQSxZQUFGO0FBQWdCQyxFQUFBQTtBQUFoQixDQUFULEVBQWlDO0FBQ2xELFNBQU8sWUFBVztBQUNoQkQsSUFBQUEsWUFBWSxDQUFDRSxTQUFiLENBQXVCQyxNQUF2QixDQUErQix1QkFBL0I7QUFDQUYsSUFBQUEsSUFBSSxDQUFDQyxTQUFMLENBQWVDLE1BQWYsQ0FBdUIsYUFBdkI7QUFDRCxHQUhEO0FBSUQsQ0FMRDs7QUFPQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZDLEVBQUFBLE1BQU0sRUFBRSxNQUFNO0FBQ1osVUFBTUwsSUFBSSxHQUFHTSxRQUFRLENBQUNDLGFBQVQsQ0FBd0IscUJBQXhCLENBQWIsQ0FEWSxDQUVaOztBQUNBLFVBQU1SLFlBQVksR0FBR08sUUFBUSxDQUFDQyxhQUFULENBQXdCLHdCQUF4QixDQUFyQjtBQUVBUixJQUFBQSxZQUFZLENBQUNTLGdCQUFiLENBQThCLE9BQTlCLEVBQXVDVixVQUFVLENBQUM7QUFBRUMsTUFBQUEsWUFBRjtBQUFnQkMsTUFBQUE7QUFBaEIsS0FBRCxDQUFqRDtBQUNBQSxJQUFBQSxJQUFJLENBQUNRLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCVixVQUFVLENBQUM7QUFBRUMsTUFBQUEsWUFBRjtBQUFnQkMsTUFBQUE7QUFBaEIsS0FBRCxDQUF6QztBQUNEO0FBUmMsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0b2dnbGVNZW51ID0gZnVuY3Rpb24oeyBoYW1idXJnZXJCdG4sIG1lbnUgfSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaGFtYnVyZ2VyQnRuLmNsYXNzTGlzdC50b2dnbGUgKCdoYW1idXJnZXItbWVudV9hY3RpdmUnKTtcbiAgICBtZW51LmNsYXNzTGlzdC50b2dnbGUgKCdtZW51X2FjdGl2ZScpXG4gIH1cbn0gXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBvbkxvYWQ6ICgpID0+IHtcbiAgICBjb25zdCBtZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciAoJy5oYW1idXJnZXItbWVudV9uYXYnKTtcbiAgICAvLyBjb25zdCBtZW51TGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKCcuaGFtYnVyZ2VyLW1lbnVfbGluaycpO1xuICAgIGNvbnN0IGhhbWJ1cmdlckJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IgKCcuaGFtYnVyZ2VyLW1lbnVfYnV0dG9uJyk7XG5cbiAgICBoYW1idXJnZXJCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVNZW51KHsgaGFtYnVyZ2VyQnRuLCBtZW51IH0pKTtcbiAgICBtZW51LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlTWVudSh7IGhhbWJ1cmdlckJ0biwgbWVudSB9KSlcbiAgfVxufSJdfQ==
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/hamburger.js","/")
},{"buffer":38,"pBGvAp":40}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
const onResize = function (fn) {
  window.addEventListener('resize', function () {
    setTimeout(fn, 100);
  });
};

module.exports = {
  onResize
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9ic2VydmFibGVzLmpzIl0sIm5hbWVzIjpbIm9uUmVzaXplIiwiZm4iLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwic2V0VGltZW91dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFFBQVEsR0FBRyxVQUFTQyxFQUFULEVBQWE7QUFDNUJDLEVBQUFBLE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBa0MsWUFBVztBQUFFQyxJQUFBQSxVQUFVLENBQUNILEVBQUQsRUFBSyxHQUFMLENBQVY7QUFBcUIsR0FBcEU7QUFDRCxDQUZEOztBQUlBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZk4sRUFBQUE7QUFEZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG9uUmVzaXplID0gZnVuY3Rpb24oZm4pIHtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uKCkgeyBzZXRUaW1lb3V0KGZuLCAxMDApIH0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBvblJlc2l6ZVxufSJdfQ==
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/observables.js","/")
},{"buffer":38,"pBGvAp":40}],6:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
const productPictures = document.querySelector('#window-img');
const productPicturesButton = document.querySelector('.product-pictures_button');
const picturesTitleImg = document.querySelector('.title-pictures');
const picturesGallery = document.querySelector('.product-pictures_gallery');
productPicturesButton.addEventListener('click', function () {
  productPictures.classList.toggle('product-hide');
  clearGalleryProductImages();
});

function createGalleryProductImages(arrImg) {
  picturesTitleImg.setAttribute('src', arrImg[0]);

  for (let i = 0; i < arrImg.length; i++) {
    const img = document.createElement('IMG');
    const divWrapImgGallery = document.createElement('div');
    divWrapImgGallery.className = "product-pictures_img";
    picturesGallery.appendChild(divWrapImgGallery);
    divWrapImgGallery.appendChild(img);
    img.setAttribute('src', arrImg[i]);
    img.classList = 'images-colection';

    if (i === 0) {
      divWrapImgGallery.classList.add('active');
    }

    img.addEventListener('click', function (e) {
      picturesTitleImg.setAttribute('src', arrImg[i]);
      const target = e.target;
      const child = picturesGallery.childNodes;

      for (let i = 1; i < child.length; i++) {
        if (child[i].classList.contains('active')) {
          child[i].classList.remove('active');
        }

        target.parentNode.classList.add('active');
      }
    });
  }

  productPictures.classList.toggle('product-hide');
}

function clearGalleryProductImages() {
  const imgColection = document.querySelectorAll('.product-pictures_img');

  for (let i = 0; i < imgColection.length; i++) {
    const img = imgColection[i];
    img.parentNode.removeChild(img);
  }
}

module.exports = {
  createGalleryProductImages
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2R1Y3RQaWN0dXJlcy5qcyJdLCJuYW1lcyI6WyJwcm9kdWN0UGljdHVyZXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJwcm9kdWN0UGljdHVyZXNCdXR0b24iLCJwaWN0dXJlc1RpdGxlSW1nIiwicGljdHVyZXNHYWxsZXJ5IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImNsZWFyR2FsbGVyeVByb2R1Y3RJbWFnZXMiLCJjcmVhdGVHYWxsZXJ5UHJvZHVjdEltYWdlcyIsImFyckltZyIsInNldEF0dHJpYnV0ZSIsImkiLCJsZW5ndGgiLCJpbWciLCJjcmVhdGVFbGVtZW50IiwiZGl2V3JhcEltZ0dhbGxlcnkiLCJjbGFzc05hbWUiLCJhcHBlbmRDaGlsZCIsImFkZCIsImUiLCJ0YXJnZXQiLCJjaGlsZCIsImNoaWxkTm9kZXMiLCJjb250YWlucyIsInJlbW92ZSIsInBhcmVudE5vZGUiLCJpbWdDb2xlY3Rpb24iLCJxdWVyeVNlbGVjdG9yQWxsIiwicmVtb3ZlQ2hpbGQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxlQUFlLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF3QixhQUF4QixDQUF4QjtBQUNBLE1BQU1DLHFCQUFxQixHQUFHRixRQUFRLENBQUNDLGFBQVQsQ0FBd0IsMEJBQXhCLENBQTlCO0FBQ0EsTUFBTUUsZ0JBQWdCLEdBQUdILFFBQVEsQ0FBQ0MsYUFBVCxDQUF3QixpQkFBeEIsQ0FBekI7QUFDQSxNQUFNRyxlQUFlLEdBQUdKLFFBQVEsQ0FBQ0MsYUFBVCxDQUF3QiwyQkFBeEIsQ0FBeEI7QUFFQUMscUJBQXFCLENBQUNHLGdCQUF0QixDQUF3QyxPQUF4QyxFQUFpRCxZQUFXO0FBQ3hETixFQUFBQSxlQUFlLENBQUNPLFNBQWhCLENBQTBCQyxNQUExQixDQUFrQyxjQUFsQztBQUNBQyxFQUFBQSx5QkFBeUI7QUFDNUIsQ0FIRDs7QUFLQSxTQUFTQywwQkFBVCxDQUFxQ0MsTUFBckMsRUFBNkM7QUFDekNQLEVBQUFBLGdCQUFnQixDQUFDUSxZQUFqQixDQUErQixLQUEvQixFQUFzQ0QsTUFBTSxDQUFDLENBQUQsQ0FBNUM7O0FBRUEsT0FBSyxJQUFJRSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRixNQUFNLENBQUNHLE1BQTNCLEVBQW1DRCxDQUFDLEVBQXBDLEVBQXdDO0FBQ3BDLFVBQU1FLEdBQUcsR0FBR2QsUUFBUSxDQUFDZSxhQUFULENBQXdCLEtBQXhCLENBQVo7QUFDQSxVQUFNQyxpQkFBaUIsR0FBR2hCLFFBQVEsQ0FBQ2UsYUFBVCxDQUF3QixLQUF4QixDQUExQjtBQUNBQyxJQUFBQSxpQkFBaUIsQ0FBQ0MsU0FBbEIsR0FBOEIsc0JBQTlCO0FBQ0FiLElBQUFBLGVBQWUsQ0FBQ2MsV0FBaEIsQ0FBNkJGLGlCQUE3QjtBQUNBQSxJQUFBQSxpQkFBaUIsQ0FBQ0UsV0FBbEIsQ0FBK0JKLEdBQS9CO0FBQ0FBLElBQUFBLEdBQUcsQ0FBQ0gsWUFBSixDQUFrQixLQUFsQixFQUF5QkQsTUFBTSxDQUFDRSxDQUFELENBQS9CO0FBQ0FFLElBQUFBLEdBQUcsQ0FBQ1IsU0FBSixHQUFnQixrQkFBaEI7O0FBRUEsUUFBSU0sQ0FBQyxLQUFLLENBQVYsRUFBYTtBQUNUSSxNQUFBQSxpQkFBaUIsQ0FBQ1YsU0FBbEIsQ0FBNEJhLEdBQTVCLENBQWlDLFFBQWpDO0FBQ0g7O0FBRURMLElBQUFBLEdBQUcsQ0FBQ1QsZ0JBQUosQ0FBc0IsT0FBdEIsRUFBK0IsVUFBVWUsQ0FBVixFQUFhO0FBQ3hDakIsTUFBQUEsZ0JBQWdCLENBQUNRLFlBQWpCLENBQStCLEtBQS9CLEVBQXNDRCxNQUFNLENBQUNFLENBQUQsQ0FBNUM7QUFDQSxZQUFNUyxNQUFNLEdBQUdELENBQUMsQ0FBQ0MsTUFBakI7QUFDQSxZQUFNQyxLQUFLLEdBQUdsQixlQUFlLENBQUNtQixVQUE5Qjs7QUFFQSxXQUFLLElBQUlYLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdVLEtBQUssQ0FBQ1QsTUFBMUIsRUFBa0NELENBQUMsRUFBbkMsRUFBdUM7QUFFbkMsWUFBSVUsS0FBSyxDQUFDVixDQUFELENBQUwsQ0FBU04sU0FBVCxDQUFtQmtCLFFBQW5CLENBQTRCLFFBQTVCLENBQUosRUFBNEM7QUFDeENGLFVBQUFBLEtBQUssQ0FBQ1YsQ0FBRCxDQUFMLENBQVNOLFNBQVQsQ0FBbUJtQixNQUFuQixDQUEyQixRQUEzQjtBQUNIOztBQUVESixRQUFBQSxNQUFNLENBQUNLLFVBQVAsQ0FBa0JwQixTQUFsQixDQUE0QmEsR0FBNUIsQ0FBaUMsUUFBakM7QUFDSDtBQUNKLEtBYkQ7QUFjSDs7QUFFRHBCLEVBQUFBLGVBQWUsQ0FBQ08sU0FBaEIsQ0FBMEJDLE1BQTFCLENBQWtDLGNBQWxDO0FBQ0g7O0FBRUQsU0FBU0MseUJBQVQsR0FBc0M7QUFDbEMsUUFBTW1CLFlBQVksR0FBRzNCLFFBQVEsQ0FBQzRCLGdCQUFULENBQTJCLHVCQUEzQixDQUFyQjs7QUFFQSxPQUFLLElBQUloQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHZSxZQUFZLENBQUNkLE1BQWpDLEVBQXlDRCxDQUFDLEVBQTFDLEVBQThDO0FBQzFDLFVBQU1FLEdBQUcsR0FBR2EsWUFBWSxDQUFDZixDQUFELENBQXhCO0FBQ0FFLElBQUFBLEdBQUcsQ0FBQ1ksVUFBSixDQUFlRyxXQUFmLENBQTRCZixHQUE1QjtBQUNIO0FBQ0o7O0FBRURnQixNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFBQ3RCLEVBQUFBO0FBQUQsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwcm9kdWN0UGljdHVyZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yICgnI3dpbmRvdy1pbWcnKTtcbmNvbnN0IHByb2R1Y3RQaWN0dXJlc0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IgKCcucHJvZHVjdC1waWN0dXJlc19idXR0b24nKTtcbmNvbnN0IHBpY3R1cmVzVGl0bGVJbWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yICgnLnRpdGxlLXBpY3R1cmVzJyk7XG5jb25zdCBwaWN0dXJlc0dhbGxlcnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yICgnLnByb2R1Y3QtcGljdHVyZXNfZ2FsbGVyeScpO1xuXG5wcm9kdWN0UGljdHVyZXNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lciAoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgcHJvZHVjdFBpY3R1cmVzLmNsYXNzTGlzdC50b2dnbGUgKCdwcm9kdWN0LWhpZGUnKTtcbiAgICBjbGVhckdhbGxlcnlQcm9kdWN0SW1hZ2VzICgpXG59KTtcblxuZnVuY3Rpb24gY3JlYXRlR2FsbGVyeVByb2R1Y3RJbWFnZXMgKGFyckltZykge1xuICAgIHBpY3R1cmVzVGl0bGVJbWcuc2V0QXR0cmlidXRlICgnc3JjJywgYXJySW1nWzBdKVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJJbWcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAoJ0lNRycpO1xuICAgICAgICBjb25zdCBkaXZXcmFwSW1nR2FsbGVyeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgKCdkaXYnKTtcbiAgICAgICAgZGl2V3JhcEltZ0dhbGxlcnkuY2xhc3NOYW1lID0gXCJwcm9kdWN0LXBpY3R1cmVzX2ltZ1wiO1xuICAgICAgICBwaWN0dXJlc0dhbGxlcnkuYXBwZW5kQ2hpbGQgKGRpdldyYXBJbWdHYWxsZXJ5KTtcbiAgICAgICAgZGl2V3JhcEltZ0dhbGxlcnkuYXBwZW5kQ2hpbGQgKGltZyk7XG4gICAgICAgIGltZy5zZXRBdHRyaWJ1dGUgKCdzcmMnLCBhcnJJbWdbaV0pO1xuICAgICAgICBpbWcuY2xhc3NMaXN0ID0gJ2ltYWdlcy1jb2xlY3Rpb24nO1xuICAgICAgICBcbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIGRpdldyYXBJbWdHYWxsZXJ5LmNsYXNzTGlzdC5hZGQgKCdhY3RpdmUnKVxuICAgICAgICB9XG5cbiAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIgKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBwaWN0dXJlc1RpdGxlSW1nLnNldEF0dHJpYnV0ZSAoJ3NyYycsIGFyckltZ1tpXSlcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBwaWN0dXJlc0dhbGxlcnkuY2hpbGROb2Rlc1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNoaWxkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkW2ldLmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkW2ldLmNsYXNzTGlzdC5yZW1vdmUgKCdhY3RpdmUnKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQgKCdhY3RpdmUnKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbiAgICBcbiAgICBwcm9kdWN0UGljdHVyZXMuY2xhc3NMaXN0LnRvZ2dsZSAoJ3Byb2R1Y3QtaGlkZScpXG59XG5cbmZ1bmN0aW9uIGNsZWFyR2FsbGVyeVByb2R1Y3RJbWFnZXMgKCkge1xuICAgIGNvbnN0IGltZ0NvbGVjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKCcucHJvZHVjdC1waWN0dXJlc19pbWcnKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW1nQ29sZWN0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGltZyA9IGltZ0NvbGVjdGlvbltpXVxuICAgICAgICBpbWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCAoaW1nKVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7Y3JlYXRlR2FsbGVyeVByb2R1Y3RJbWFnZXN9O1xuXG4iXX0=
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/productPictures.js","/")
},{"buffer":38,"pBGvAp":40}],7:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// const basket = require ('./basket.js');
// const request = require('./services/request')
// const productsMock = [
//     { id: 'fish-1', avatar: 'img/title_img/5.png', title: 'Корюшка дальневосточная с икрой', description: 'Минимальный заказ 1 кг. Размер рыбы 26-33 см.', price: 680, quantity: 1, step: 1, category: 'fish' },
//     { id: 'fish-2', avatar: 'img/title_img/5.png', title: 'Камбала дальневосточная с икрой', description: 'Минимальный заказ 1 кг. Вес одной камбалы от 300 грамм.', price:590, quantity: 1, step: 1, category: 'fish' },
//     { id: 'fish-3', avatar: 'img/title_img/5.png', title: 'ОКУНЬ', description: 'Окунь предпочитает водоемы с чистой водой. Это могут быть реки, пруды, озера, водохранилища и т.д. Окунь является самым часто встречающимся хищником, но его никогда не найдешь там, где вода мутная и грязная.', price: 630, quantity: 1, step: 1, category: 'fish' },
//     { id: 'fish-4', avatar: 'img/title_img/5.png', title: 'ГУСТЕРА', description: 'Это малоподвижный вид рыбы с голубовато-серым окрасом. Живет густера примерно 15 лет и врастает в длину до 35 см, при весе 1,2 кг. Густера, как и лещ, растет довольно медленно.', price: 12000, quantity: 1, step: 1, category: 'fish' },
//     { id: 'fish-5', avatar: 'img/title_img/5.png', title: 'САЗАН', description: 'Эта рыба отличается темно-желто-золотистым оттенком', price: 10, quantity: 1, step: 1, category: 'fish' },
//     { id: 'caviar-1', avatar: 'img/title_img/5.png', title: 'Икра лемонемы', description: 'Икра в вакуумной упаковке. Фасовка по 0,5 кг. Минимальный заказ 0,5 кг. Срок хранения 6 мес.', price: 700, quantity: 0.5, step: 0.5, category: 'caviar'},
//     { id: 'caviar-2', avatar: 'img/title_img/5.png', title: 'Икра наваги', description: 'Икра в вакуумной упаковке. Фасовка по 0,5 кг. Минимальный заказ 0,5 кг. Срок хранения 6 мес.', price: 680, quantity: 0.5, step: 0.5, category: 'caviar'},
//     { id: 'snacks-1', avatar: 'img/title_img/5.png', title: 'Палочки горбуши', description: 'Суперовые палочки горбуши фасовка по 0,5кг', price: 560, quantity: 0.5, step: 0.5, category: 'snacks'},
//     { id: 'caviar-3', avatar: 'img/title_img/5.png', title: 'Икра лосося', description: 'Очень вкусная икра в ястыке', price: 750, quantity: 0.5, step: 0.5, category: 'caviar'},
//     { id: 'caviar-4', avatar: 'img/title_img/5.png', title: 'Икра лосося', description: 'Очень вкусная икра в ястыке', price: 750, quantity: 0.5, step: 0.5, category: 'caviar'},
//     { id: 'snacks-2', avatar: 'img/title_img/5.png', title: 'Рыбные палочки', description: 'Суперовые палочки горбуши фасовка по 0,5кг', price: 490, quantity: 0.5, step: 0.5, category: 'snacks'},
// ]
// function handleProducts (products) {
//     for (let i = 0; i < products.length; i++) {
//         const product = products[i];
//         if (product.category === 'fish') {
//             drawFish(product)
//         } else if (product.category === 'caviar') {
//             drawCaviar(product)
//         } else if (product.category === 'snacks') {
//             drawSnacks(product)
//         }
//     };
// }
// function createCard (product, option) {
//     const wrapCard = document.createElement('div');
//     const title = document.createElement('h3');
//     const description = document.createElement('span');
//     const price = document.createElement ('span');
//     const wrapButton = document.createElement('div');
//     const buttonLook = document.createElement('button');
//     const buttonBasket = document.createElement('button');
//     const titleImage = document.createElement('img');
//     const input = document.createElement('input')
//     const quantityWrap = document.createElement('div');
//     const spanPlus = document.createElement('span');
//     const spanMinus = document.createElement('span');
//     const spanWeight = document.createElement('span');
//     wrapCard.className = "product-wrap";
//     title.className = "product-title";
//     description.className = "product-discription";
//     price.className = "product-price";
//     wrapButton.className = "button-wrap";
//     buttonLook.className = "button-look";
//     buttonBasket.className = "button-basket";
//     buttonBasket.id = product.id;
//     titleImage.className = "title-img";
//     titleImage.setAttribute ('alt', 'titl-image')
//     titleImage.setAttribute ('src', product.avatar);
//     input.className = "quantity";
//     quantityWrap.className = "quantity-wrap";
//     spanPlus.className = "plus-minus";
//     spanMinus.className = "plus-minus";
//     spanWeight.className = "weight";
//     wrapCard.append(titleImage);
//     wrapCard.append(title);
//     wrapCard.append(description);
//     wrapCard.append(price);
//     wrapCard.append(wrapButton);
//     wrapButton.append(quantityWrap);
//     quantityWrap.append(spanMinus);
//     quantityWrap.append(input);
//     quantityWrap.append(spanWeight);
//     quantityWrap.append(spanPlus);
//     wrapButton.append(buttonBasket);
//     title.innerHTML = product.title;
//     description.innerHTML = product.description;
//     price.innerHTML = 'Цена: ' + product.price + ' грн';
//     buttonBasket.innerHTML = "В корзину";
//     spanPlus.innerHTML = "+";
//     spanMinus.innerHTML = "-";
//     input.value = option.quantity;
//     spanWeight.innerHTML = "кг";
//     input.addEventListener ('change', function () {
//         input.value = this.value;
//     });
//     spanPlus.addEventListener ('click', function () {
//         const nowValue = input.value;
//         const newValue = parseFloat(nowValue) + option.step;
//         input.value = newValue; 
//     });
//     spanMinus.addEventListener ('click', function () {
//         const nowValue = input.value;
//         const newValue = parseFloat(nowValue) - option.step;
//         input.value = newValue < option.quantity ? option.quantity : newValue;
//     });
//     buttonBasket.addEventListener ('click', function (event) {
//         const target = event.target;
//         const id = target.id;
//         // cart[art] = 1;
//         const product = productsMock.find (function (pr) {
//             if (pr.id === id) {
//                 return true
//             }
//         });
//         const quantityProductCard = input.value;
//         product.quantity = quantityProductCard;
//         console.log (product.quantity)
//         basket.productToBasket(product, option);
//     });
//     return wrapCard;
// }
// function drawFish (product) {
//     const fishCategoryWrap = document.querySelector('.fish-category_wrap');
//     const card = createCard(product, {quantity: 1, step: 1});
//     fishCategoryWrap.append(card);
// }
// function drawCaviar (product) {
//     const caviarCategoryWrap = document.querySelector('.caviar-category_wrap');
//     const card = createCard(product, {quantity: 0.5, step: 0.5});
//     caviarCategoryWrap.append(card);
// }
// function drawSnacks (product) {
//     const snacksCategoryWrap = document.querySelector('.snacks-category_wrap');
//     const card = createCard(product, {quantity: 0.5, step: 0.5});
//     snacksCategoryWrap.append(card);
// }
// handleProducts(productsMock);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/products.js","/")
},{"buffer":38,"pBGvAp":40}],8:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
const axios = require('axios');

const fetch = function (options) {
  return axios(options).then(function (res) {
    return res.data;
  }).catch(function (error) {
    // TO DO business might need handle errors in some way in which case use Promise.reject(error) instead
    console.error(error);
  });
};

const get = function (url) {
  return fetch({
    url
  });
};

const post = function (url, data) {
  return fetch(Object.assign({}, {
    url,
    method: 'POST',
    data
  }));
};

const put = function (url, data) {
  return fetch({
    url,
    method: 'PUT',
    data
  });
};

const del = function (url) {
  return fetch({
    url,
    method: 'DELETE'
  });
};

module.exports = {
  get: get,
  post: post,
  put: put,
  del: del
}; // window.__fetch = {
//   get,
//   put,
//   post,
//   del
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcXVlc3QuanMiXSwibmFtZXMiOlsiYXhpb3MiLCJyZXF1aXJlIiwiZmV0Y2giLCJvcHRpb25zIiwidGhlbiIsInJlcyIsImRhdGEiLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSIsImdldCIsInVybCIsInBvc3QiLCJPYmplY3QiLCJhc3NpZ24iLCJtZXRob2QiLCJwdXQiLCJkZWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUVBLE1BQU1DLEtBQUssR0FBRyxVQUFTQyxPQUFULEVBQWtCO0FBQzlCLFNBQU9ILEtBQUssQ0FBQ0csT0FBRCxDQUFMLENBQ0pDLElBREksQ0FDQyxVQUFTQyxHQUFULEVBQWM7QUFDbEIsV0FBT0EsR0FBRyxDQUFDQyxJQUFYO0FBQ0QsR0FISSxFQUlKQyxLQUpJLENBSUUsVUFBU0MsS0FBVCxFQUFnQjtBQUNyQjtBQUNBQyxJQUFBQSxPQUFPLENBQUNELEtBQVIsQ0FBY0EsS0FBZDtBQUNELEdBUEksQ0FBUDtBQVFELENBVEQ7O0FBV0EsTUFBTUUsR0FBRyxHQUFHLFVBQVNDLEdBQVQsRUFBYztBQUN4QixTQUFPVCxLQUFLLENBQUM7QUFBRVMsSUFBQUE7QUFBRixHQUFELENBQVo7QUFDRCxDQUZEOztBQUlBLE1BQU1DLElBQUksR0FBRyxVQUFTRCxHQUFULEVBQWNMLElBQWQsRUFBb0I7QUFDL0IsU0FBT0osS0FBSyxDQUFDVyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCO0FBQzdCSCxJQUFBQSxHQUQ2QjtBQUU3QkksSUFBQUEsTUFBTSxFQUFFLE1BRnFCO0FBRzdCVCxJQUFBQTtBQUg2QixHQUFsQixDQUFELENBQVo7QUFLRCxDQU5EOztBQVFBLE1BQU1VLEdBQUcsR0FBRyxVQUFTTCxHQUFULEVBQWNMLElBQWQsRUFBb0I7QUFDOUIsU0FBT0osS0FBSyxDQUFDO0FBQ1hTLElBQUFBLEdBRFc7QUFFWEksSUFBQUEsTUFBTSxFQUFFLEtBRkc7QUFHWFQsSUFBQUE7QUFIVyxHQUFELENBQVo7QUFLRCxDQU5EOztBQVFBLE1BQU1XLEdBQUcsR0FBRyxVQUFTTixHQUFULEVBQWM7QUFDeEIsU0FBT1QsS0FBSyxDQUFDO0FBQ1hTLElBQUFBLEdBRFc7QUFFWEksSUFBQUEsTUFBTSxFQUFFO0FBRkcsR0FBRCxDQUFaO0FBSUQsQ0FMRDs7QUFPQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZULEVBQUFBLEdBQUcsRUFBRUEsR0FEVTtBQUVmRSxFQUFBQSxJQUFJLEVBQUVBLElBRlM7QUFHZkksRUFBQUEsR0FBRyxFQUFFQSxHQUhVO0FBSWZDLEVBQUFBLEdBQUcsRUFBRUE7QUFKVSxDQUFqQixDLENBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpXG5cbmNvbnN0IGZldGNoID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICByZXR1cm4gYXhpb3Mob3B0aW9ucylcbiAgICAudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgIHJldHVybiByZXMuZGF0YTtcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgLy8gVE8gRE8gYnVzaW5lc3MgbWlnaHQgbmVlZCBoYW5kbGUgZXJyb3JzIGluIHNvbWUgd2F5IGluIHdoaWNoIGNhc2UgdXNlIFByb21pc2UucmVqZWN0KGVycm9yKSBpbnN0ZWFkXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9KTtcbn07XG5cbmNvbnN0IGdldCA9IGZ1bmN0aW9uKHVybCkge1xuICByZXR1cm4gZmV0Y2goeyB1cmwgfSk7XG59O1xuXG5jb25zdCBwb3N0ID0gZnVuY3Rpb24odXJsLCBkYXRhKSB7XG4gIHJldHVybiBmZXRjaChPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgdXJsLFxuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGRhdGEsXG4gIH0pKTtcbn07XG5cbmNvbnN0IHB1dCA9IGZ1bmN0aW9uKHVybCwgZGF0YSkge1xuICByZXR1cm4gZmV0Y2goe1xuICAgIHVybCxcbiAgICBtZXRob2Q6ICdQVVQnLFxuICAgIGRhdGEsXG4gIH0pO1xufTtcblxuY29uc3QgZGVsID0gZnVuY3Rpb24odXJsKSB7XG4gIHJldHVybiBmZXRjaCh7XG4gICAgdXJsLFxuICAgIG1ldGhvZDogJ0RFTEVURScsXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldDogZ2V0LFxuICBwb3N0OiBwb3N0LFxuICBwdXQ6IHB1dCxcbiAgZGVsOiBkZWxcbn1cblxuLy8gd2luZG93Ll9fZmV0Y2ggPSB7XG4vLyAgIGdldCxcbi8vICAgcHV0LFxuLy8gICBwb3N0LFxuLy8gICBkZWxcbi8vIH1cbiJdfQ==
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/services/request.js","/services")
},{"axios":11,"buffer":38,"pBGvAp":40}],9:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
const modalWindow = document.querySelector('#window-thank');
const thankPageButton = document.querySelector('.thank-page_button');
thankPageButton.addEventListener('click', function () {
  modalWindow.classList.toggle('hidden'); // modalWindow.classList.remove ('modal-window');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRoYW5rUGFnZS5qcyJdLCJuYW1lcyI6WyJtb2RhbFdpbmRvdyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInRoYW5rUGFnZUJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFdBQVcsR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXdCLGVBQXhCLENBQXBCO0FBQ0EsTUFBTUMsZUFBZSxHQUFHRixRQUFRLENBQUNDLGFBQVQsQ0FBd0Isb0JBQXhCLENBQXhCO0FBRUFDLGVBQWUsQ0FBQ0MsZ0JBQWhCLENBQWtDLE9BQWxDLEVBQTJDLFlBQVc7QUFDbERKLEVBQUFBLFdBQVcsQ0FBQ0ssU0FBWixDQUFzQkMsTUFBdEIsQ0FBOEIsUUFBOUIsRUFEa0QsQ0FFbEQ7QUFDSCxDQUhEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9kYWxXaW5kb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yICgnI3dpbmRvdy10aGFuaycpO1xuY29uc3QgdGhhbmtQYWdlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciAoJy50aGFuay1wYWdlX2J1dHRvbicpO1xuXG50aGFua1BhZ2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lciAoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgbW9kYWxXaW5kb3cuY2xhc3NMaXN0LnRvZ2dsZSAoJ2hpZGRlbicpO1xuICAgIC8vIG1vZGFsV2luZG93LmNsYXNzTGlzdC5yZW1vdmUgKCdtb2RhbC13aW5kb3cnKTtcbn0pXG5cbiJdfQ==
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/thankPage.js","/")
},{"buffer":38,"pBGvAp":40}],10:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
const {
  onResize
} = require('./observables');

const banner = document.getElementsByClassName('banner')[0];
const header = document.getElementsByTagName('header')[0];
const sections = document.getElementsByTagName('section'); // const nav = querySelector('.nav');
// smooth scrolling

const setElementsHeight = () => {
  Array.from(sections).forEach(section => {
    const windowHeight = window.innerHeight;
    const sectionHeight = section.getBoundingClientRect().height;
    const headerHeight = header.getBoundingClientRect().height;
    section.style.paddingTop = headerHeight + 15 + 'px';

    if (sectionHeight < windowHeight) {
      section.style['min-height'] = window.innerHeight + 'px';
    }
  });
  banner.style.height = window.innerHeight + 'px';
};

const scroll = e => {
  const hash = e.target.getAttribute('href');
  const targetClassName = hash.replace(/#/, '.');
  e.preventDefault();
  window.location.hash = hash;
  document.querySelector(targetClassName).scrollIntoView({
    behavior: 'smooth'
  });
};

Array.from(document.querySelectorAll('.nav')).forEach(nav => nav.addEventListener('click', scroll));
document.querySelector('.hamburger-menu_nav').addEventListener('click', scroll);
onResize(setElementsHeight); // active nav item effect

const activeItemUnderline = document.querySelector('.active-item-underline');
const navAList = Array.from(document.querySelector('.nav').querySelectorAll('a'));
const hash = window.location.hash || '#home';

const underlineSelectedItem = item => {
  let left = 0;

  for (let i = 0; i < navAList.length; i++) {
    if (navAList[i] !== item) {
      left = left + navAList[i].getBoundingClientRect().width;
    } else {
      break;
    }
  }

  const itemWidth = item.getBoundingClientRect().width;
  activeItemUnderline.style.width = itemWidth + 'px';
  activeItemUnderline.style.left = left + 'px';
};

const changeSelectedItem = e => {
  e.preventDefault();
  const href = e.target.getAttribute('href');
  const item = navAList.find(navA => navA.getAttribute('href') === href);
  underlineSelectedItem(item);
};

Array.from(document.querySelectorAll('.nav')).forEach(nav => nav.addEventListener('click', changeSelectedItem)); // actions before load and onload

activeItemUnderline.style.transition = 'all 0s';
activeItemUnderline.style.display = 'none'; // window.onload = () => {
//   setElementsHeight()
//   underlineSelectedItem(document.querySelector(`[href="${hash}"]`))
//   activeItemUnderline.style.display = 'block'
//   activeItemUnderline.style.transition = 'all .6s'
// }

module.exports = {
  onLoad: () => {
    setElementsHeight();
    underlineSelectedItem(document.querySelector(`[href="${hash}"]`));
    activeItemUnderline.style.display = 'block';
    activeItemUnderline.style.transition = 'all .6s';
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/visual-effects.js","/")
},{"./observables":5,"buffer":38,"pBGvAp":40}],11:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
module.exports = require('./lib/axios');
}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/index.js","/../node_modules/axios")
},{"./lib/axios":13,"buffer":38,"pBGvAp":40}],12:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var utils = require('./../utils');
var settle = require('./../core/settle');
var buildURL = require('./../helpers/buildURL');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var createError = require('../core/createError');

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = require('./../helpers/cookies');

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/adapters/xhr.js","/../node_modules/axios/lib/adapters")
},{"../core/createError":19,"./../core/settle":23,"./../helpers/buildURL":27,"./../helpers/cookies":29,"./../helpers/isURLSameOrigin":31,"./../helpers/parseHeaders":33,"./../utils":35,"buffer":38,"pBGvAp":40}],13:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var mergeConfig = require('./core/mergeConfig');
var defaults = require('./defaults');

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/axios.js","/../node_modules/axios/lib")
},{"./cancel/Cancel":14,"./cancel/CancelToken":15,"./cancel/isCancel":16,"./core/Axios":17,"./core/mergeConfig":22,"./defaults":25,"./helpers/bind":26,"./helpers/spread":34,"./utils":35,"buffer":38,"pBGvAp":40}],14:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/cancel/Cancel.js","/../node_modules/axios/lib/cancel")
},{"buffer":38,"pBGvAp":40}],15:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var Cancel = require('./Cancel');

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/cancel/CancelToken.js","/../node_modules/axios/lib/cancel")
},{"./Cancel":14,"buffer":38,"pBGvAp":40}],16:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/cancel/isCancel.js","/../node_modules/axios/lib/cancel")
},{"buffer":38,"pBGvAp":40}],17:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var utils = require('./../utils');
var buildURL = require('../helpers/buildURL');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var mergeConfig = require('./mergeConfig');

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);
  config.method = config.method ? config.method.toLowerCase() : 'get';

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/core/Axios.js","/../node_modules/axios/lib/core")
},{"../helpers/buildURL":27,"./../utils":35,"./InterceptorManager":18,"./dispatchRequest":20,"./mergeConfig":22,"buffer":38,"pBGvAp":40}],18:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var utils = require('./../utils');

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/core/InterceptorManager.js","/../node_modules/axios/lib/core")
},{"./../utils":35,"buffer":38,"pBGvAp":40}],19:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var enhanceError = require('./enhanceError');

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/core/createError.js","/../node_modules/axios/lib/core")
},{"./enhanceError":21,"buffer":38,"pBGvAp":40}],20:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');
var isAbsoluteURL = require('./../helpers/isAbsoluteURL');
var combineURLs = require('./../helpers/combineURLs');

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/core/dispatchRequest.js","/../node_modules/axios/lib/core")
},{"../cancel/isCancel":16,"../defaults":25,"./../helpers/combineURLs":28,"./../helpers/isAbsoluteURL":30,"./../utils":35,"./transformData":24,"buffer":38,"pBGvAp":40}],21:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/core/enhanceError.js","/../node_modules/axios/lib/core")
},{"buffer":38,"pBGvAp":40}],22:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var utils = require('../utils');

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  utils.forEach(['url', 'method', 'params', 'data'], function valueFromConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    }
  });

  utils.forEach(['headers', 'auth', 'proxy'], function mergeDeepProperties(prop) {
    if (utils.isObject(config2[prop])) {
      config[prop] = utils.deepMerge(config1[prop], config2[prop]);
    } else if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (utils.isObject(config1[prop])) {
      config[prop] = utils.deepMerge(config1[prop]);
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  utils.forEach([
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength',
    'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken',
    'socketPath'
  ], function defaultToConfig2(prop) {
    if (typeof config2[prop] !== 'undefined') {
      config[prop] = config2[prop];
    } else if (typeof config1[prop] !== 'undefined') {
      config[prop] = config1[prop];
    }
  });

  return config;
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/core/mergeConfig.js","/../node_modules/axios/lib/core")
},{"../utils":35,"buffer":38,"pBGvAp":40}],23:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var createError = require('./createError');

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/core/settle.js","/../node_modules/axios/lib/core")
},{"./createError":19,"buffer":38,"pBGvAp":40}],24:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var utils = require('./../utils');

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/core/transformData.js","/../node_modules/axios/lib/core")
},{"./../utils":35,"buffer":38,"pBGvAp":40}],25:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var utils = require('./utils');
var normalizeHeaderName = require('./helpers/normalizeHeaderName');

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  // Only Node.JS has a process variable that is of [[Class]] process
  if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = require('./adapters/http');
  } else if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = require('./adapters/xhr');
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/defaults.js","/../node_modules/axios/lib")
},{"./adapters/http":12,"./adapters/xhr":12,"./helpers/normalizeHeaderName":32,"./utils":35,"buffer":38,"pBGvAp":40}],26:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/helpers/bind.js","/../node_modules/axios/lib/helpers")
},{"buffer":38,"pBGvAp":40}],27:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var utils = require('./../utils');

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/helpers/buildURL.js","/../node_modules/axios/lib/helpers")
},{"./../utils":35,"buffer":38,"pBGvAp":40}],28:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/helpers/combineURLs.js","/../node_modules/axios/lib/helpers")
},{"buffer":38,"pBGvAp":40}],29:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/helpers/cookies.js","/../node_modules/axios/lib/helpers")
},{"./../utils":35,"buffer":38,"pBGvAp":40}],30:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/helpers/isAbsoluteURL.js","/../node_modules/axios/lib/helpers")
},{"buffer":38,"pBGvAp":40}],31:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/helpers/isURLSameOrigin.js","/../node_modules/axios/lib/helpers")
},{"./../utils":35,"buffer":38,"pBGvAp":40}],32:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var utils = require('../utils');

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/helpers/normalizeHeaderName.js","/../node_modules/axios/lib/helpers")
},{"../utils":35,"buffer":38,"pBGvAp":40}],33:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var utils = require('./../utils');

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/helpers/parseHeaders.js","/../node_modules/axios/lib/helpers")
},{"./../utils":35,"buffer":38,"pBGvAp":40}],34:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/helpers/spread.js","/../node_modules/axios/lib/helpers")
},{"buffer":38,"pBGvAp":40}],35:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
'use strict';

var bind = require('./helpers/bind');
var isBuffer = require('is-buffer');

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function deepMerge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = deepMerge(result[key], val);
    } else if (typeof val === 'object') {
      result[key] = deepMerge({}, val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  deepMerge: deepMerge,
  extend: extend,
  trim: trim
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/lib/utils.js","/../node_modules/axios/lib")
},{"./helpers/bind":26,"buffer":38,"is-buffer":36,"pBGvAp":40}],36:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

module.exports = function isBuffer (obj) {
  return obj != null && obj.constructor != null &&
    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/axios/node_modules/is-buffer/index.js","/../node_modules/axios/node_modules/is-buffer")
},{"buffer":38,"pBGvAp":40}],37:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/base64-js/lib/b64.js","/../node_modules/base64-js/lib")
},{"buffer":38,"pBGvAp":40}],38:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192

/**
 * If `Buffer._useTypedArrays`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (compatible down to IE6)
 */
Buffer._useTypedArrays = (function () {
  // Detect if browser supports Typed Arrays. Supported browsers are IE 10+, Firefox 4+,
  // Chrome 7+, Safari 5.1+, Opera 11.6+, iOS 4.2+. If the browser does not support adding
  // properties to `Uint8Array` instances, then that's the same as no `Uint8Array` support
  // because we need to be able to add all the node Buffer API methods. This is an issue
  // in Firefox 4-29. Now fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=695438
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() &&
        typeof arr.subarray === 'function' // Chrome 9-10 lack `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Workaround: node's base64 implementation allows for non-padded strings
  // while base64-js does not.
  if (encoding === 'base64' && type === 'string') {
    subject = stringtrim(subject)
    while (subject.length % 4 !== 0) {
      subject = subject + '='
    }
  }

  // Find the length
  var length
  if (type === 'number')
    length = coerce(subject)
  else if (type === 'string')
    length = Buffer.byteLength(subject, encoding)
  else if (type === 'object')
    length = coerce(subject.length) // assume that object is array-like
  else
    throw new Error('First argument needs to be a number, array or string.')

  var buf
  if (Buffer._useTypedArrays) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer._useTypedArrays && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    for (i = 0; i < length; i++) {
      if (Buffer.isBuffer(subject))
        buf[i] = subject.readUInt8(i)
      else
        buf[i] = subject[i]
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer._useTypedArrays && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

// STATIC METHODS
// ==============

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.isBuffer = function (b) {
  return !!(b !== null && b !== undefined && b._isBuffer)
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'hex':
      ret = str.length / 2
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.concat = function (list, totalLength) {
  assert(isArray(list), 'Usage: Buffer.concat(list, [totalLength])\n' +
      'list should be an Array.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (typeof totalLength !== 'number') {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

// BUFFER INSTANCE METHODS
// =======================

function _hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  assert(strLen % 2 === 0, 'Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    assert(!isNaN(byte), 'Invalid hex string')
    buf[offset + i] = byte
  }
  Buffer._charsWritten = i * 2
  return i
}

function _utf8Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function _asciiWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function _binaryWrite (buf, string, offset, length) {
  return _asciiWrite(buf, string, offset, length)
}

function _base64Write (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function _utf16leWrite (buf, string, offset, length) {
  var charsWritten = Buffer._charsWritten =
    blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = _asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = _binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = _base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leWrite(this, string, offset, length)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toString = function (encoding, start, end) {
  var self = this

  encoding = String(encoding || 'utf8').toLowerCase()
  start = Number(start) || 0
  end = (end !== undefined)
    ? Number(end)
    : end = self.length

  // Fastpath empty strings
  if (end === start)
    return ''

  var ret
  switch (encoding) {
    case 'hex':
      ret = _hexSlice(self, start, end)
      break
    case 'utf8':
    case 'utf-8':
      ret = _utf8Slice(self, start, end)
      break
    case 'ascii':
      ret = _asciiSlice(self, start, end)
      break
    case 'binary':
      ret = _binarySlice(self, start, end)
      break
    case 'base64':
      ret = _base64Slice(self, start, end)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = _utf16leSlice(self, start, end)
      break
    default:
      throw new Error('Unknown encoding')
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  assert(end >= start, 'sourceEnd < sourceStart')
  assert(target_start >= 0 && target_start < target.length,
      'targetStart out of bounds')
  assert(start >= 0 && start < source.length, 'sourceStart out of bounds')
  assert(end >= 0 && end <= source.length, 'sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer._useTypedArrays) {
    for (var i = 0; i < len; i++)
      target[i + target_start] = this[i + start]
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

function _base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function _utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function _asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++)
    ret += String.fromCharCode(buf[i])
  return ret
}

function _binarySlice (buf, start, end) {
  return _asciiSlice(buf, start, end)
}

function _hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function _utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i+1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = clamp(start, len, 0)
  end = clamp(end, len, len)

  if (Buffer._useTypedArrays) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  return this[offset]
}

function _readUInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    val = buf[offset]
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
  } else {
    val = buf[offset] << 8
    if (offset + 1 < len)
      val |= buf[offset + 1]
  }
  return val
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  return _readUInt16(this, offset, true, noAssert)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  return _readUInt16(this, offset, false, noAssert)
}

function _readUInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val
  if (littleEndian) {
    if (offset + 2 < len)
      val = buf[offset + 2] << 16
    if (offset + 1 < len)
      val |= buf[offset + 1] << 8
    val |= buf[offset]
    if (offset + 3 < len)
      val = val + (buf[offset + 3] << 24 >>> 0)
  } else {
    if (offset + 1 < len)
      val = buf[offset + 1] << 16
    if (offset + 2 < len)
      val |= buf[offset + 2] << 8
    if (offset + 3 < len)
      val |= buf[offset + 3]
    val = val + (buf[offset] << 24 >>> 0)
  }
  return val
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  return _readUInt32(this, offset, true, noAssert)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  return _readUInt32(this, offset, false, noAssert)
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert) {
    assert(offset !== undefined && offset !== null,
        'missing offset')
    assert(offset < this.length, 'Trying to read beyond buffer length')
  }

  if (offset >= this.length)
    return

  var neg = this[offset] & 0x80
  if (neg)
    return (0xff - this[offset] + 1) * -1
  else
    return this[offset]
}

function _readInt16 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt16(buf, offset, littleEndian, true)
  var neg = val & 0x8000
  if (neg)
    return (0xffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  return _readInt16(this, offset, true, noAssert)
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  return _readInt16(this, offset, false, noAssert)
}

function _readInt32 (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  var len = buf.length
  if (offset >= len)
    return

  var val = _readUInt32(buf, offset, littleEndian, true)
  var neg = val & 0x80000000
  if (neg)
    return (0xffffffff - val + 1) * -1
  else
    return val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  return _readInt32(this, offset, true, noAssert)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  return _readInt32(this, offset, false, noAssert)
}

function _readFloat (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 3 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 23, 4)
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  return _readFloat(this, offset, true, noAssert)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  return _readFloat(this, offset, false, noAssert)
}

function _readDouble (buf, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset + 7 < buf.length, 'Trying to read beyond buffer length')
  }

  return ieee754.read(buf, offset, littleEndian, 52, 8)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  return _readDouble(this, offset, true, noAssert)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  return _readDouble(this, offset, false, noAssert)
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'trying to write beyond buffer length')
    verifuint(value, 0xff)
  }

  if (offset >= this.length) return

  this[offset] = value
}

function _writeUInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 2); i < j; i++) {
    buf[offset + i] =
        (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
            (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  _writeUInt16(this, value, offset, false, noAssert)
}

function _writeUInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'trying to write beyond buffer length')
    verifuint(value, 0xffffffff)
  }

  var len = buf.length
  if (offset >= len)
    return

  for (var i = 0, j = Math.min(len - offset, 4); i < j; i++) {
    buf[offset + i] =
        (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  _writeUInt32(this, value, offset, false, noAssert)
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset < this.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7f, -0x80)
  }

  if (offset >= this.length)
    return

  if (value >= 0)
    this.writeUInt8(value, offset, noAssert)
  else
    this.writeUInt8(0xff + value + 1, offset, noAssert)
}

function _writeInt16 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 1 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fff, -0x8000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt16(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt16(buf, 0xffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  _writeInt16(this, value, offset, false, noAssert)
}

function _writeInt32 (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifsint(value, 0x7fffffff, -0x80000000)
  }

  var len = buf.length
  if (offset >= len)
    return

  if (value >= 0)
    _writeUInt32(buf, value, offset, littleEndian, noAssert)
  else
    _writeUInt32(buf, 0xffffffff + value + 1, offset, littleEndian, noAssert)
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, true, noAssert)
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  _writeInt32(this, value, offset, false, noAssert)
}

function _writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 3 < buf.length, 'Trying to write beyond buffer length')
    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 23, 4)
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  _writeFloat(this, value, offset, false, noAssert)
}

function _writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    assert(value !== undefined && value !== null, 'missing value')
    assert(typeof littleEndian === 'boolean', 'missing or invalid endian')
    assert(offset !== undefined && offset !== null, 'missing offset')
    assert(offset + 7 < buf.length,
        'Trying to write beyond buffer length')
    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }

  var len = buf.length
  if (offset >= len)
    return

  ieee754.write(buf, value, offset, littleEndian, 52, 8)
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  _writeDouble(this, value, offset, false, noAssert)
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (typeof value === 'string') {
    value = value.charCodeAt(0)
  }

  assert(typeof value === 'number' && !isNaN(value), 'value is not a number')
  assert(end >= start, 'end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  assert(start >= 0 && start < this.length, 'start out of bounds')
  assert(end >= 0 && end <= this.length, 'end out of bounds')

  for (var i = start; i < end; i++) {
    this[i] = value
  }
}

Buffer.prototype.inspect = function () {
  var out = []
  var len = this.length
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i])
    if (i === exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...'
      break
    }
  }
  return '<Buffer ' + out.join(' ') + '>'
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer._useTypedArrays) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1)
        buf[i] = this[i]
      return buf.buffer
    }
  } else {
    throw new Error('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

// slice(start, end)
function clamp (index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len
  if (index >= 0) return index
  index += len
  if (index >= 0) return index
  return 0
}

function coerce (length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length)
  return length < 0 ? 0 : length
}

function isArray (subject) {
  return (Array.isArray || function (subject) {
    return Object.prototype.toString.call(subject) === '[object Array]'
  })(subject)
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F)
      byteArray.push(str.charCodeAt(i))
    else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16))
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  var pos
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

/*
 * We have to make sure that the value is a valid integer. This means that it
 * is non-negative. It has no fractional component and that it does not
 * exceed the maximum allowed value.
 */
function verifuint (value, max) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value >= 0, 'specified a negative value for writing an unsigned value')
  assert(value <= max, 'value is larger than maximum value for type')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifsint (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
  assert(Math.floor(value) === value, 'value has a fractional component')
}

function verifIEEE754 (value, max, min) {
  assert(typeof value === 'number', 'cannot write a non-number as a number')
  assert(value <= max, 'value larger than maximum allowed value')
  assert(value >= min, 'value smaller than minimum allowed value')
}

function assert (test, message) {
  if (!test) throw new Error(message || 'Failed assertion')
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/buffer/index.js","/../node_modules/buffer")
},{"base64-js":37,"buffer":38,"ieee754":39,"pBGvAp":40}],39:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/ieee754/index.js","/../node_modules/ieee754")
},{"buffer":38,"pBGvAp":40}],40:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

}).call(this,require("pBGvAp"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/../node_modules/process/browser.js","/../node_modules/process")
},{"buffer":38,"pBGvAp":40}]},{},[3])
//# sourceMappingURL=data:application/json;base64,
